{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","rows","columns","moves","playerTurn","resetBoard","setState","winner","getPiece","x","y","filter","item","getWinningMovesForVelocity","xPosition","yPosition","xVelocity","yVelocity","winningMoves","player","delta","checkX","checkY","checkPiece","push","checkForWin","velocities","dex","length","element","addMove","nextPlayerTurn","availableYPosition","position","concat","this","rowViews","row","columnViews","column","piece","onClick","style","width","height","backgroundColor","display","padding","borderRadius","flex","border","undefined","flexDirection","left","right","bottom","top","zIndex","justifyContent","alignItems","color","fontWeight","fontSize","toUpperCase","props","Object","assign","styles","container","renderBoard","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59466a2a.chunk.js","sourcesContent":["import React from 'react';\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n  state= {\n    rows: 6,\n    columns: 7,\n    moves:[],\n    playerTurn: 'red',\n    \n  };\n\n  //resets the board \n  resetBoard = () => {\n    this.setState({moves: [], winner: null });\n  }\n  \n\n  //gets the x and y coordinates for a piece \n  getPiece = (x, y) => {\n    const list = this.state.moves.filter((item) =>{\n      return (item.x === x && item.y === y);\n    });\n\n    return list[0];\n  }\n\n  //finds out if there is a \n  getWinningMovesForVelocity=(xPosition, yPosition , xVelocity, yVelocity) =>{\n    const winningMoves = [{x:xPosition, y: yPosition}];\n    const player = this.getPiece(xPosition, yPosition).player;\n\n    for(let delta = 1; delta <= 3; delta += 1){\n      const checkX = xPosition + xVelocity * delta;\n      const checkY = yPosition + yVelocity * delta;\n\n      const checkPiece = this.getPiece(checkX, checkY);\n      if(checkPiece && checkPiece.player === player){\n        winningMoves.push({x: checkX, y: checkY});\n      } else{\n        break;\n      }\n    }\n\n    for(let delta = -1; delta >= -3; delta -= 1){\n      const checkX = xPosition + xVelocity * delta;\n      const checkY = yPosition + yVelocity * delta;\n\n      const checkPiece = this.getPiece(checkX, checkY);\n      if(checkPiece && checkPiece.player === player){\n        winningMoves.push({x: checkX, y: checkY});\n      } else{\n        break;\n      }\n    }\n    return winningMoves;\n  }\n\n  //checks if there is a win \n  checkForWin = (x, y, player) =>{\n    const velocities= [{x: 1, y:0}, {x: 0, y:1}, {x: -1, y:1}, {x: 1, y:1}];\n    for (let dex = 0; dex < velocities.length; dex++) {\n      const element = velocities[dex];\n      const winningMoves = this.getWinningMovesForVelocity(x, y, element.x, element.y);\n      if(winningMoves.length >3){\n        this.setState({winner: this.getPiece(x,y).player, winningMoves});\n      }\n    \n    }\n  }\n\n\n  //allows the palyer to add a move\n  addMove = (x, y) =>{\n    const {playerTurn} = this.state;\n    const nextPlayerTurn = playerTurn === 'red' ? 'yellow' : 'red';\n    let availableYPosition = null;\n    for(let position = this.state.rows-1; position >= 0; position--){\n      if(!this.getPiece(x, position)){\n        availableYPosition = position;\n        break;\n      }\n    }\n\n    if(availableYPosition !== null){\n      this.setState({moves: this.state.moves.concat({x, y: availableYPosition, player: playerTurn}), playerTurn: nextPlayerTurn }, () => this.checkForWin(x, availableYPosition, playerTurn));\n\n    }\n  }\n  \n  //creates the board\n  renderBoard(){\n    const {rows, columns, winner} = this.state;\n    const rowViews = [];\n    \n    for(let row= 0; row < this.state.rows; row += 1 ){\n      const columnViews = [];\n      for (let column = 0; column < this.state.columns; column += 1){\n        const piece = this.getPiece(column, row);\n        columnViews.push(\n          <div onClick={() => {this.addMove(column, row)}} style= {{width: '6vw', height: '6vw', backgroundColor: '#1167b1', display: 'flex', padding: 5}}>\n            <div style={{borderRadius: '50%', backgroundColor: 'white', flex: 1, display:'flex'}}>\n              {piece ? <div style={{backgroundColor: piece.player, flex:1, borderRadius: \"50%\", border: '1px solid #333'}}/> : undefined}\n              </div>\n            </div>\n        );\n      }\n\n      rowViews.push(\n        <div  style={{display: 'flex', flexDirection: 'row'}}>\n          {columnViews}\n        </div>\n      );\n    }\n\n    return(\n      <div style={{backgroundColor: 'red', display:'flex', flexDirection: 'column'}}>\n        {winner && <div onClick={this.resetBoard} style={{position: 'absolute', left: 0, right: 0, bottom: 0, top:0, zIndex: 3, backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex',\n        justifyContent: 'center', alignItems: 'center', color:'#fff', fontWeight:'200', fontSize:'8vw'}}>{`${winner.toUpperCase()} WINS!!`}</div>}\n        {rowViews}\n      </div>\n    );\n  }\n  render() {\n    const {style} = this.props;\n\n    return (\n      <div style= {style ? Object.assign({}, styles.container, style) : styles.container}>\n        <div>\n        {this.renderBoard()}\n        <button onClick={this.resetBoard}>Clear Board</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles ={\n  container: {\n    height: '100%',\n    padding: 5,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}